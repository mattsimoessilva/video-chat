name: CI/CD Pipeline

on:
  push:
    branches:
      - master
gi
jobs:
  build-test-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to GitHub Docker Registry
        run: echo "${{ secrets.DOCKER_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin

      - name: Build Docker image
        run: docker build -t ghcr.io/${{ github.repository }}:latest -f ./Dockerfile .

      - name: Run Tests
        run: |
          docker-compose -f docker-compose.yml run --rm tests

      - name: Push Docker image
        run: docker push ghcr.io/${{ github.repository }}:latest

      - name: Configure Git
        run: |
          git config --global user.email "matheussimoesdasilva2002@gmail.com"
          git config --global user.name "mattsimoessilva"

      - name: Create Tag
        id: create_tag
        run: |
          git fetch --tags

          latest_tag=$(git tag --list "test-*" | sort -V | tail -n 1)

          if [ -z "$latest_tag" ]; then
            new_number=1
          else
            new_number=$(( $(echo $latest_tag | sed 's/test-//') + 1 ))
          fi

          new_tag="test-$new_number"

          if git rev-parse "$new_tag" >/dev/null 2>&1; then
            echo "Tag $new_tag already exists locally."
          else
            git tag -a "$new_tag" -m "Test release"
            git push https://x-access-token:${{ secrets.ACCESS }}@github.com/mattsimoessilva/docker-project.git "$new_tag"
          fi

          echo "::set-output name=new_tag::$new_tag"
          echo "::set-output name=new_number::$new_number"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "${{ steps.create_tag.outputs.new_tag }}"
          release_name: "Test ${{ steps.create_tag.outputs.new_number }} Release"
          body: |
            Release notes for the new version.
        env:
          GITHUB_TOKEN: ${{ secrets.ACCESS }}

  deploy:
    runs-on: ubuntu-latest
    needs: build-test-release
    if: github.ref == 'refs/heads/master'

    steps:
      - name: Deploy to Railway
        env:
          RAILWAY_API_TOKEN: ${{ secrets.RAILWAY_API_TOKEN }}
        run: |
          railway up
